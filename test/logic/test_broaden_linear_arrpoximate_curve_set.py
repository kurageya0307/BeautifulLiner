
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '../../model'))
from point import Point

sys.path.append(os.path.join(os.path.dirname(__file__), '../../controller'))
from create_broad_linear_arrpoximate_curve_set import *
from create_linear_approximate_curve_set import createLinearApproximateCurve
from create_cubic_bezier_curve_set import createCubicBezierCurveSet

import unittest

class TestApproximateCurveWithLineSegments(unittest.TestCase):
    def setUp(self):
        self.max_delta = 1.0

        self.points = []
        for i in range(10):
            self.points.append( Point(float(i*10.0), 0.0) )
        #end

        self.l = LinearApproximateCurve()
        for point in self.points:
            self.l.append(point)
        #end

        self.half_length = len(self.points)/2.0 - 0.5 
        self.the_answers = []
        self.the_answers.append( Point(0.0, 0.0) )
        for i in range(8):
            delta = self.max_delta * ( self.half_length - abs(self.half_length - i - 1) ) / self.half_length
            self.the_answers.append(   Point(  float( (i + 1)*10.0 ), delta  )   )
        #end for
        self.the_answers.append( Point(90.0, 0.0) )
        for i in range(8):
            delta = self.max_delta * ( self.half_length - abs(self.half_length - i - 1) ) / self.half_length
            self.the_answers.append(   Point(  float( (8 - i)*10.0 ), -1.0*delta )   )
        #end for
        self.the_answers.append( Point(0.0, 0.0) )
    #end def setUp

    def testGetDeltaPoint(self):
        point_a = Point(0.0, 0.0)
        point_b = Point(10.0, 0.0)
        d_p = getDeltaPoint(point_a, point_b, 1.0)
        self.assertEqual( d_p.to_s(), "10.000,1.000")
    #end def testGetEquallyDividedPointsBetween2Points

    def testGetSlightlyAwayGoingCurve(self):
        slightly_away_curve = getSlightlyAwayGoingCurve(self.l, self.max_delta)
        s_points = slightly_away_curve.points
        for i, s_p in enumerate(s_points):
            self.assertAlmostEqual( s_p.x, self.the_answers[i].x )
            self.assertAlmostEqual( s_p.y, self.the_answers[i].y )
        #end
    #end

    def testMakeSlightlyAwayGoingCurves(self):
        slightly_away_curves = makeSlightlyAwayGoingCurves([self.l, self.l, self.l], self.max_delta)
        for slightly_away_curve in slightly_away_curves:
            s_points = slightly_away_curve.points
            for i, s_p in enumerate(s_points):
                self.assertAlmostEqual( s_p.x, self.the_answers[i].x )
                self.assertAlmostEqual( s_p.y, self.the_answers[i].y )
            #end
        #end
    #end

    def testCreateBroadLinearApproximateCurveSet(self):
        cubic_bezier_curve_set = createCubicBezierCurveSet("data/aaa.svg")
        linear_approximate_curve_set = createLinearApproximateCurve(cubic_bezier_curve_set, 1.0)
        broad_linear_approximate_curve_set = createBroadLinearApproximateCurveSet(linear_approximate_curve_set, 1.0)

        the_answer_str = "<g id=\"senga1\">\n<path fill=\"none\" stroke-width=\"1.0\" stroke=\"#000000\" d=\"M 624.369 665.275 L 624.347 665.157 L 624.219 664.846 L 623.991 664.348 L 623.671 663.670 L 623.268 662.817 L 622.789 661.795 L 622.241 660.611 L 621.633 659.269 L 620.971 657.776 L 620.265 656.138 L 619.521 654.361 L 618.748 652.450 L 617.952 650.413 L 617.143 648.253 L 616.326 645.979 L 615.512 643.595 L 614.706 641.107 L 613.916 638.522 L 613.151 635.846 L 612.418 633.085 L 611.725 630.244 L 611.064 627.414 L 610.425 624.693 L 609.812 622.090 L 609.225 619.610 L 608.588 617.272 L 607.980 615.061 L 607.401 612.977 L 606.853 611.023 L 606.336 609.202 L 605.852 607.515 L 605.401 605.965 L 604.985 604.553 L 604.604 603.282 L 604.260 602.154 L 603.953 601.171 L 603.685 600.335 L 603.456 599.647 L 603.268 599.112 L 603.121 598.729 L 603.017 598.503 L 602.956 598.433 L 602.268 596.094 L 601.779 594.476 L 601.432 593.371 L 601.170 592.576 L 600.937 591.883 L 600.675 591.088 L 600.328 589.984 L 599.839 588.365 L 599.839 588.365 L 600.251 590.005 L 600.521 591.131 L 600.706 591.947 L 600.862 592.661 L 601.046 593.478 L 601.316 594.604 L 601.728 596.244 L 602.340 598.604 L 602.323 598.695 L 602.350 598.942 L 602.419 599.345 L 602.530 599.900 L 602.681 600.607 L 602.872 601.463 L 603.101 602.466 L 603.368 603.613 L 603.671 604.903 L 604.009 606.334 L 604.382 607.902 L 604.788 609.608 L 605.227 611.447 L 605.697 613.418 L 606.198 615.519 L 606.728 617.748 L 607.287 620.102 L 607.951 622.560 L 608.641 625.140 L 609.356 627.840 L 610.097 630.656 L 610.874 633.501 L 611.692 636.271 L 612.541 638.951 L 613.415 641.535 L 614.304 644.018 L 615.201 646.394 L 616.098 648.657 L 616.988 650.801 L 617.862 652.822 L 618.714 654.712 L 619.536 656.467 L 620.319 658.080 L 621.056 659.546 L 621.739 660.859 L 622.361 662.012 L 622.913 663.002 L 623.389 663.820 L 623.780 664.463 L 624.079 664.923 L 624.278 665.196 L 624.369 665.275 \"/>\n<path fill=\"none\" stroke-width=\"1.0\" stroke=\"#000000\" d=\"M 624.369 665.275 L 624.349 665.156 L 624.222 664.844 L 623.995 664.346 L 623.677 663.667 L 623.276 662.813 L 622.798 661.791 L 622.251 660.606 L 621.645 659.263 L 620.985 657.770 L 620.280 656.131 L 619.538 654.353 L 618.766 652.443 L 617.972 650.404 L 617.164 648.245 L 616.350 645.970 L 615.537 643.586 L 614.732 641.098 L 613.945 638.513 L 613.182 635.837 L 612.450 633.076 L 611.759 630.235 L 611.100 627.405 L 610.463 624.683 L 609.851 622.081 L 609.185 619.620 L 608.546 617.283 L 607.936 615.072 L 607.356 612.989 L 606.806 611.036 L 606.288 609.215 L 605.802 607.529 L 605.349 605.979 L 604.932 604.567 L 604.549 603.297 L 604.203 602.169 L 603.895 601.186 L 603.625 600.351 L 603.395 599.664 L 603.205 599.129 L 603.057 598.747 L 602.951 598.521 L 602.889 598.452 L 602.203 596.130 L 601.669 594.355 L 601.226 592.908 L 600.812 591.570 L 600.369 590.123 L 599.834 588.348 L 599.834 588.348 L 600.288 590.146 L 600.652 591.615 L 600.985 592.975 L 601.348 594.444 L 601.802 596.241 L 602.407 598.586 L 602.389 598.677 L 602.414 598.924 L 602.482 599.327 L 602.591 599.884 L 602.741 600.591 L 602.930 601.447 L 603.157 602.451 L 603.422 603.599 L 603.724 604.889 L 604.061 606.320 L 604.432 607.889 L 604.837 609.595 L 605.274 611.434 L 605.742 613.406 L 606.242 615.508 L 606.770 617.737 L 607.327 620.092 L 607.912 622.570 L 608.604 625.150 L 609.321 627.848 L 610.063 630.665 L 610.841 633.509 L 611.661 636.279 L 612.513 638.959 L 613.388 641.544 L 614.278 644.026 L 615.177 646.402 L 616.076 648.665 L 616.968 650.809 L 617.844 652.829 L 618.697 654.719 L 619.520 656.474 L 620.305 658.086 L 621.044 659.551 L 621.728 660.864 L 622.352 662.017 L 622.906 663.005 L 623.383 663.824 L 623.776 664.465 L 624.076 664.925 L 624.276 665.197 L 624.369 665.275 \"/>\n</g><g id=\"senga2\">\n<path fill=\"none\" stroke-width=\"1.0\" stroke=\"#000000\" d=\"M 624.369 665.275 L 624.347 665.157 L 624.219 664.846 L 623.991 664.348 L 623.671 663.670 L 623.268 662.817 L 622.789 661.795 L 622.241 660.611 L 621.633 659.269 L 620.971 657.776 L 620.265 656.138 L 619.521 654.361 L 618.748 652.450 L 617.952 650.413 L 617.143 648.253 L 616.326 645.979 L 615.512 643.595 L 614.706 641.107 L 613.916 638.522 L 613.151 635.846 L 612.418 633.085 L 611.725 630.244 L 611.064 627.414 L 610.425 624.693 L 609.812 622.090 L 609.225 619.610 L 608.588 617.272 L 607.980 615.061 L 607.401 612.977 L 606.853 611.023 L 606.336 609.202 L 605.852 607.515 L 605.401 605.965 L 604.985 604.553 L 604.604 603.282 L 604.260 602.154 L 603.953 601.171 L 603.685 600.335 L 603.456 599.647 L 603.268 599.112 L 603.121 598.729 L 603.017 598.503 L 602.956 598.433 L 602.268 596.094 L 601.779 594.476 L 601.432 593.371 L 601.170 592.576 L 600.937 591.883 L 600.675 591.088 L 600.328 589.984 L 599.839 588.365 L 599.839 588.365 L 600.251 590.005 L 600.521 591.131 L 600.706 591.947 L 600.862 592.661 L 601.046 593.478 L 601.316 594.604 L 601.728 596.244 L 602.340 598.604 L 602.323 598.695 L 602.350 598.942 L 602.419 599.345 L 602.530 599.900 L 602.681 600.607 L 602.872 601.463 L 603.101 602.466 L 603.368 603.613 L 603.671 604.903 L 604.009 606.334 L 604.382 607.902 L 604.788 609.608 L 605.227 611.447 L 605.697 613.418 L 606.198 615.519 L 606.728 617.748 L 607.287 620.102 L 607.951 622.560 L 608.641 625.140 L 609.356 627.840 L 610.097 630.656 L 610.874 633.501 L 611.692 636.271 L 612.541 638.951 L 613.415 641.535 L 614.304 644.018 L 615.201 646.394 L 616.098 648.657 L 616.988 650.801 L 617.862 652.822 L 618.714 654.712 L 619.536 656.467 L 620.319 658.080 L 621.056 659.546 L 621.739 660.859 L 622.361 662.012 L 622.913 663.002 L 623.389 663.820 L 623.780 664.463 L 624.079 664.923 L 624.278 665.196 L 624.369 665.275 \"/>\n<path fill=\"none\" stroke-width=\"1.0\" stroke=\"#000000\" d=\"M 624.369 665.275 L 624.349 665.156 L 624.222 664.844 L 623.995 664.346 L 623.677 663.667 L 623.276 662.813 L 622.798 661.791 L 622.251 660.606 L 621.645 659.263 L 620.985 657.770 L 620.280 656.131 L 619.538 654.353 L 618.766 652.443 L 617.972 650.404 L 617.164 648.245 L 616.350 645.970 L 615.537 643.586 L 614.732 641.098 L 613.945 638.513 L 613.182 635.837 L 612.450 633.076 L 611.759 630.235 L 611.100 627.405 L 610.463 624.683 L 609.851 622.081 L 609.185 619.620 L 608.546 617.283 L 607.936 615.072 L 607.356 612.989 L 606.806 611.036 L 606.288 609.215 L 605.802 607.529 L 605.349 605.979 L 604.932 604.567 L 604.549 603.297 L 604.203 602.169 L 603.895 601.186 L 603.625 600.351 L 603.395 599.664 L 603.205 599.129 L 603.057 598.747 L 602.951 598.521 L 602.889 598.452 L 602.203 596.130 L 601.669 594.355 L 601.226 592.908 L 600.812 591.570 L 600.369 590.123 L 599.834 588.348 L 599.834 588.348 L 600.288 590.146 L 600.652 591.615 L 600.985 592.975 L 601.348 594.444 L 601.802 596.241 L 602.407 598.586 L 602.389 598.677 L 602.414 598.924 L 602.482 599.327 L 602.591 599.884 L 602.741 600.591 L 602.930 601.447 L 603.157 602.451 L 603.422 603.599 L 603.724 604.889 L 604.061 606.320 L 604.432 607.889 L 604.837 609.595 L 605.274 611.434 L 605.742 613.406 L 606.242 615.508 L 606.770 617.737 L 607.327 620.092 L 607.912 622.570 L 608.604 625.150 L 609.321 627.848 L 610.063 630.665 L 610.841 633.509 L 611.661 636.279 L 612.513 638.959 L 613.388 641.544 L 614.278 644.026 L 615.177 646.402 L 616.076 648.665 L 616.968 650.809 L 617.844 652.829 L 618.697 654.719 L 619.520 656.474 L 620.305 658.086 L 621.044 659.551 L 621.728 660.864 L 622.352 662.017 L 622.906 663.005 L 623.383 663.824 L 623.776 664.465 L 624.076 664.925 L 624.276 665.197 L 624.369 665.275 \"/>\n</g>"
        #print( broad_linear_approximate_curve_set.to_svg_str() )
        self.assertEqual( broad_linear_approximate_curve_set.to_svg_str(), the_answer_str )

    #end


#end class

if __name__ == '__main__':
    unittest.main()
#end
